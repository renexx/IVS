/**
 * This file contains a java implementation of a Controller for a java FXML application. It is a part of a group project for the subject IVS of Brno University of Technology.
 *
 * @file Controller.java
 * @author Rene Bolf & Radoslav Grencik
 * @brief Implementation of a Controller for a java FXML application.
 * @package calculatorfx
 */
package calculatorfx;

import java.net.URL;
import java.text.DecimalFormat;
import java.util.ResourceBundle;
import javafx.event.ActionEvent;
import javafx.fxml.FXML;
import javafx.fxml.FXMLLoader;
import javafx.fxml.Initializable;
import javafx.scene.Parent;
import javafx.scene.Scene;
import javafx.scene.control.Button;
import javafx.scene.control.TextField;
import javafx.scene.image.Image;
import javafx.stage.Stage;

/**
 * @class Controller
 * @brief The controller of the calculator
 */

public class Controller implements Initializable {

    @FXML
    private TextField operation;

    @FXML
    private TextField display;

    @FXML
    private Button one;

    @FXML
    private Button two;

    @FXML
    private Button three;

    @FXML
    private Button four;

    @FXML
    private Button five;

    @FXML
    private Button six;

    @FXML
    private Button seven;

    @FXML
    private Button eight;

    @FXML
    private Button nine;

    @FXML
    private Button zero;

    @FXML
    private Button dot;

    @FXML
    private Button clear;

    @FXML
    private Button plus;

    @FXML
    private Button minus;

    @FXML
    private Button multiply;

    @FXML
    private Button divide;

    @FXML
    private Button fact;

    @FXML
    private Button power;

    @FXML
    private Button squareroot;

    @FXML
    private Button tobinary;

    @FXML
    private Button negate;

    @FXML
    private Button equal;

    double result = 0;
    double input1;
    double input2;
    int ps; /**< Number of operation is stored here (0 = clear, 1 = plus, 2 = minus, 3 = multiply, 4 = divide, 5 = fact, 6 = power, 7 = squareroot, 8 = tobinary) */
    int point = 0; /**< Flag which enables a dot to be typed (0 when enabled) */
    int ispoint = 0; /**< Flag which indicates that a dot was typed or generated by operation (1 when true) */
    int canneg = 0; /**< Flag which enables the negate operation (0 when enabled) */
    int emptydisplay = 1; /**< Flag which indicates that a display is empty (1 when display is empty) */

    String oldvalue; /**< This String is used to store info about operation and input number. These are than displayed onto operation display. */

    Math math = new Math();
    DecimalFormat td = new DecimalFormat("0.########"); /**< Format for decimal notation of a number */
    DecimalFormat ed = new DecimalFormat("0.########E0"); /**< Format for scientific notation of a number */

    /**
     * Method getDigits counts the digits in number (decimal dot and minus included).
     *
     * @brief Method getDigits
     * @param num method counts the digits in this number
     * @return the number of digits (decimal dot and minus included)
     */
    public int getDigits(double num) {

        if (num == 0) {
            return 1;
        }

        int ct = 0;

        if (num < 0) { /**< Number includes a minus */
            num = num * (-1);
            ct++;
        }

        long integer = (long) num;

        if (num % 1 != 0) { /**< Number has a decimal part thus includes a decimal dot */
            ct++;
            if (integer == 0) { /**< Integer part is zero thus counting will be incorrect */
                num = num + 1; /**< Some number needs to be added to integer part */
            }
            int i = 0;
            while (num % 1 != 0) { /**< Number needs to be shifted left so the decimal part will be in integer part */
                num = num * 10;
                i++;
                if (i == 8) { /**< Number has max 8 decimal digits */
                    break;
                }
            }
        }

        integer = (long) num;

        while (integer != 0) { /**< Number is shifted right and digits are counted */
            integer = integer / 10;
            ct++;
        }

        return ct;
    }

    /**
     * Method displayResult displays the result of mathematical operation onto display in decimal or scientific notation.
     *
     * @brief Method displayResult
     * @param result is the number to be displayed in normal or scientific
     * notation
     */
    public void displayResult(double result) {

        if (getDigits(result) > 16) { /**< Number contains more than 16 digits and is displayed in scientific notation */
            display.setText(String.valueOf(ed.format(result)));
            ispoint = 1;
        } else { /**< Number contains less or equal to 16 digits and is displayed in normal notation */
            display.setText(String.valueOf(td.format(result)));
        }
    }

    @FXML
    void showHelp(ActionEvent event) {

        try {
            Parent root = FXMLLoader.load(getClass().getResource("/GUI/Help.fxml"));
            Stage stage = new Stage();
            stage.setTitle("HELP");
            Image image = new Image("/icons/icon.png");
            stage.getIcons().add(image);
            stage.setScene(new Scene(root));
            stage.showAndWait();

        } catch (Exception e) {
            System.err.println("Cannot load help.");
        }
    }

    @FXML
    void Calculation(ActionEvent event) throws Exception {

        if (event.getSource() == one) {

            display.appendText("1");
            emptydisplay = 0;

        } else if (event.getSource() == two) {

            display.appendText("2");
            emptydisplay = 0;

        } else if (event.getSource() == three) {

            display.appendText("3");
            emptydisplay = 0;

        } else if (event.getSource() == four) {

            display.appendText("4");
            emptydisplay = 0;

        } else if (event.getSource() == five) {

            display.appendText("5");
            emptydisplay = 0;

        } else if (event.getSource() == six) {

            display.appendText("6");
            emptydisplay = 0;

        } else if (event.getSource() == seven) {

            display.appendText("7");
            emptydisplay = 0;

        } else if (event.getSource() == eight) {

            display.appendText("8");
            emptydisplay = 0;

        } else if (event.getSource() == nine) {

            display.appendText("9");
            emptydisplay = 0;

        } else if (event.getSource() == zero) {

            display.appendText("0");
            emptydisplay = 0;

        } else if (event.getSource() == dot && point == 0) {

            if (emptydisplay == 1) {
                display.appendText("0.");
            } else {
                display.appendText(".");
            }

            point = 1;
            ispoint = 1;
            emptydisplay = 0;

        } else if (event.getSource() == clear) {

            display.setText("");
            operation.setText("");

            input1 = 0;
            input2 = 0;
            ps = 0;
            point = 0;
            ispoint = 0;
            canneg = 0;
            emptydisplay = 1;

        } else if (event.getSource() == plus && ps == 0 && emptydisplay == 0) {

            input1 = Double.parseDouble(display.getText());

            display.setText("");
            oldvalue = String.valueOf(td.format(input1)) + "+";
            operation.setText(oldvalue);
            ps = 1;
            point = 0;
            emptydisplay = 1;

        } else if (event.getSource() == minus && ps == 0 && emptydisplay == 0) {

            input1 = Double.parseDouble(display.getText());

            display.setText("");
            oldvalue = String.valueOf(td.format(input1)) + "-";
            operation.setText(oldvalue);
            ps = 2;
            point = 0;
            emptydisplay = 1;

        } else if (event.getSource() == multiply && ps == 0 && emptydisplay == 0) {

            input1 = Double.parseDouble(display.getText());

            display.setText("");
            oldvalue = String.valueOf(td.format(input1)) + "x";
            operation.setText(oldvalue);
            ps = 3;
            point = 0;
            emptydisplay = 1;

        } else if (event.getSource() == divide && ps == 0 && emptydisplay == 0) {

            input1 = Double.parseDouble(display.getText());

            display.setText("");
            oldvalue = String.valueOf(td.format(input1)) + "/";
            operation.setText(oldvalue);
            ps = 4;
            point = 0;
            emptydisplay = 1;

        } else if (event.getSource() == fact && ps == 0) {

            input1 = 0;

            display.setText("");
            oldvalue = "!";
            operation.setText(oldvalue);
            ps = 5;
            point = 1;
            canneg = 1;
            emptydisplay = 1;

        } else if (event.getSource() == power && ps == 0 && emptydisplay == 0) {

            input1 = Double.parseDouble(display.getText());

            display.setText("");
            oldvalue = String.valueOf(td.format(input1)) + "^";
            operation.setText(oldvalue);
            ps = 6;
            point = 1;
            canneg = 1;
            emptydisplay = 1;

        } else if (event.getSource() == squareroot && ps == 0 && emptydisplay == 0) {

            input1 = Double.parseDouble(display.getText());
            if (input1 < 0) {
                input1 = input1 * (-1);
            }
            if (input1 % 1 != 0) {
                input1 = input1 - (input1 % 1);
            }

            display.setText("");
            if (input1 == 1) {
                oldvalue = String.valueOf(td.format(input1)) + "st root of ";
            } else if (input1 == 2) {
                oldvalue = String.valueOf(td.format(input1)) + "nd root of ";
            } else if (input1 == 3) {
                oldvalue = String.valueOf(td.format(input1)) + "rd root of ";
            } else {
                oldvalue = String.valueOf(td.format(input1)) + "th root of ";
            }

            operation.setText(oldvalue);
            ps = 7;
            point = 0;
            if (input1 % 2 == 0) {
                canneg = 1;
            } else {
                canneg = 0;
            }
            emptydisplay = 1;

        } else if (event.getSource() == tobinary && ps == 0) {

            input1 = 0;

            display.setText("");
            oldvalue = "bin(";
            operation.setText(oldvalue);
            ps = 8;
            point = 1;
            canneg = 1;
            emptydisplay = 1;

        } else if (event.getSource() == negate && canneg == 0 && emptydisplay == 0) {

            double temp = Double.parseDouble(display.getText());
            if (temp != 0) {
                temp = temp * (-1);
            }
            display.setText(String.valueOf(td.format(temp)));

        } else if (event.getSource() == equal && ps > 0 && emptydisplay == 0) {

            input2 = Double.parseDouble(display.getText());

            if (input2 < 0) {
                operation.setText(oldvalue + "(" + String.valueOf(td.format(input2)) + ")=");
            } else if (ps == 8) {
                operation.setText(oldvalue + String.valueOf(td.format(input2)) + ")=");
            } else if (ps == 5) {
                operation.setText(String.valueOf(td.format(input2)) + oldvalue + "=");
            } else {
                operation.setText(oldvalue + String.valueOf(td.format(input2)) + "=");
            }

            switch (ps) {

                case 1:
                    result = math.Sum(input1, input2);
                    displayResult(result);
                    break;

                case 2:
                    result = math.Sub(input1, input2);
                    displayResult(result);
                    break;

                case 3:
                    result = math.Mult(input1, input2);
                    displayResult(result);
                    break;

                case 4:
                    if (input2 == 0) {
                        display.setText("");
                        operation.setText("ERROR");
                        emptydisplay = 1;
                    } else {
                        result = math.Div(input1, input2);
                        if (result % 1 != 0) {
                            ispoint = 1;
                        }
                        displayResult(result);
                    }
                    break;

                case 5:
                    if (input2 > 20) {
                        display.setText("");
                        operation.setText("ERROR");
                        emptydisplay = 1;
                    } else {
                        result = math.Fact((long) input2);
                        displayResult(result);
                    }
                    break;

                case 6:
                    result = math.Pow(input1, input2);
                    if (result == Double.POSITIVE_INFINITY || result == Double.NEGATIVE_INFINITY) {
                        display.setText("");
                        operation.setText("ERROR");
                        emptydisplay = 1;
                    } else {
                        displayResult(result);
                    }
                    break;

                case 7:
                    if (input1 < 1) {
                        display.setText("");
                        operation.setText("ERROR");
                        emptydisplay = 1;
                    } else {
                        result = math.Root(input1, input2);
                        if (result % 1 != 0) {
                            ispoint = 1;
                        }
                        displayResult(result);
                    }
                    break;

                case 8:
                    if (input2 > 262144) {
                        display.setText("");
                        operation.setText("ERROR");
                        emptydisplay = 1;
                    } else {
                        result = math.toBinary((long) input2);
                        display.setText(String.valueOf(td.format(result)));
                    }
                    break;
            }
            ps = 0;
            canneg = 0;

            if (ispoint == 1) {
                point = 1;
            } else {
                point = 0;
            }
        }
    }

    @Override
    public void initialize(URL url, ResourceBundle rb) {
        // TODO
    }
}

/*** END OF FILE Controller.java ***/
